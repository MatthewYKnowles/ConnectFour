import {GameboardComponent, Grid, RedsTurnState} from "./gameboard.component";
import {GameboardService} from "./gameboard.service";

describe("gameboard", ()=> {
  let gameboardService: GameboardService;
  let gameboardComponent: GameboardComponent;
  let redPlayerTurn: RedsTurnState;
  beforeEach(()=> {
    gameboardService = new GameboardService();
    gameboardComponent = new GameboardComponent(gameboardService);
    redPlayerTurn = new RedsTurnState(gameboardComponent);
  });
  it("should drop a piece in column 1 and have it go to the bottom", ()=> {
    spyOn(redPlayerTurn, 'dropInColumn');
    let event: MouseEvent = <MouseEvent>{};
    event.offsetX = 0;
    redPlayerTurn.tryToDropInColumn(event);
    expect(redPlayerTurn.dropInColumn).toHaveBeenCalledWith(6, 1);
  });
  it("should drop two pieces in column 1 and have it go to the bottom two slots", ()=> {
    spyOn(redPlayerTurn, 'dropInColumn');
    let event: MouseEvent = <MouseEvent>{};
    event.offsetX = 0;
    redPlayerTurn.tryToDropInColumn(event);
    redPlayerTurn.tryToDropInColumn(event);
    expect(redPlayerTurn.dropInColumn).toHaveBeenCalledWith(5, 1);
  });
// //   it("should drop a second piece in column 1 and draw it in row 5", ()=> {
// //     let gameboard: GameboardComponent = new GameboardComponent(null);
// //     spyOn(gameboard, 'drawPiece');
// //     gameboard.tryToDropInColumn(1);
// //     gameboard.tryToDropInColumn(1);
// //     expect(gameboard.drawPiece).toHaveBeenCalledWith(1, 5);
// //   });
// //   it("should drop a third piece in column 1 and draw it in row 4", ()=> {
// //     let gameboard: GameboardComponent = new GameboardComponent(null);
// //     spyOn(gameboard, 'drawPiece');
// //     gameboard.tryToDropInColumn(1);
// //     gameboard.tryToDropInColumn(1);
// //     gameboard.tryToDropInColumn(1);
// //     expect(gameboard.drawPiece).toHaveBeenCalledWith(1, 4);
// //   });
});
// describe("winning conditions", ()=> {
//   it("should declare red the winner with a bottom row connect 4", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(4);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("red");
//   });
//   it("should declare red the winner with a second to bottom row connect 4", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//       gameboard.tryToDropInColumn(1);
//       gameboard.tryToDropInColumn(1);
//       gameboard.tryToDropInColumn(2);
//       gameboard.tryToDropInColumn(2);
//       gameboard.tryToDropInColumn(3);
//       gameboard.tryToDropInColumn(3);
//       gameboard.tryToDropInColumn(5);
//       gameboard.tryToDropInColumn(4);
//       gameboard.tryToDropInColumn(5);
//       gameboard.tryToDropInColumn(4);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("black");
//   });
//   it("should declare red the winner a connect four in column 1", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(1);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("red");
//   });
//   it("should declare black the winner with a connect four in column 1", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(2);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("black");
//   });
//   it("should declare red the winner with a connect four in a up right diagonal", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(5);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(4);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("red");
//   });
//   it("should declare black the winner with a connect four in a up right diagonal in the upper right corner", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(6);
//     gameboard.tryToDropInColumn(6);
//     gameboard.tryToDropInColumn(6);
//     gameboard.tryToDropInColumn(6);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(6);
//     gameboard.tryToDropInColumn(5);
//     gameboard.tryToDropInColumn(5);
//     gameboard.tryToDropInColumn(5);
//     gameboard.tryToDropInColumn(5);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(4);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("black");
//   });
//   it("should declare black the winner with a connect four in a down right diagonal in the upper left corner", ()=> {
//     let gameboard: GameboardComponent = new GameboardComponent(null);
//     spyOn(gameboard, 'drawPiece');
//     spyOn(gameboard, 'declareWinner');
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(1);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(2);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(3);
//     gameboard.tryToDropInColumn(7);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(4);
//     gameboard.tryToDropInColumn(4);
//     expect(gameboard.declareWinner).toHaveBeenCalledWith("black");
//   });
// });
